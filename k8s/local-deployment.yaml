# 本地开发用的简化 Kubernetes 配置
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-boot-demo
  labels:
    app: spring-boot-demo
spec:
  replicas: 1  # 本地只需要 1 个副本
  selector:
    matchLabels:
      app: spring-boot-demo
  template:
    metadata:
      labels:
        app: spring-boot-demo
    spec:
      containers:
      - name: app
        image: spring-boot-demo:latest
        imagePullPolicy: Never  # 使用本地镜像
        ports:
        - containerPort: 8080
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "dev"
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:postgresql://postgres:5432/spring-boot"
        - name: SPRING_DATASOURCE_USERNAME
          value: "spring-boot"
        - name: SPRING_DATASOURCE_PASSWORD
          value: "spring-boot"
        - name: SPRING_DATA_REDIS_HOST
          value: "redis"
        - name: JAVA_OPTS
          value: "-Xms256m -Xmx512m"  # 降低内存使用
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: spring-boot-demo-service
spec:
  type: NodePort  # 本地使用 NodePort
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30080  # 固定端口便于访问
  selector:
    app: spring-boot-demo
---
# PostgreSQL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: "spring-boot"
        - name: POSTGRES_USER
          value: "spring-boot"
        - name: POSTGRES_PASSWORD
          value: "spring-boot"
        ports:
        - containerPort: 5432
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  ports:
  - port: 5432
  selector:
    app: postgres
---
# Redis
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  ports:
  - port: 6379
  selector:
    app: redis
