# Spring Boot Demo - Docker Compose Configuration
# 简化版本，仅包含核心服务用于 NLP 和 RAG Flow 演示

version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: demo-postgres
    environment:
      POSTGRES_DB: demo_db
      POSTGRES_USER: demo_user
      POSTGRES_PASSWORD: demo_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U demo_user -d demo_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - demo-network

  # Python ML 服务 (用于 NLP 和 RAG)
  ml-service:
    build:
      context: ../python-services/ml-service
      dockerfile: Dockerfile
    container_name: demo-ml-service
    ports:
      - "8001:8001"
    environment:
      VECTOR_DB_PROVIDER: chroma
      CHROMA_PERSIST_DIR: /app/chroma_db
      LOG_LEVEL: INFO
    volumes:
      - chroma_data:/app/chroma_db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - demo-network
    restart: unless-stopped

  # Spring Boot 后端服务
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: demo-backend
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/demo_db
      SPRING_DATASOURCE_USERNAME: demo_user
      SPRING_DATASOURCE_PASSWORD: demo_pass
      ML_SERVICE_URL: http://ml-service:8001
    depends_on:
      postgres:
        condition: service_healthy
      ml-service:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - demo-network
    restart: unless-stopped

  # React 前端服务
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: demo-frontend
    ports:
      - "3000:80"
    environment:
      VITE_API_BASE_URL: http://localhost:8080
    depends_on:
      - backend
    networks:
      - demo-network
    restart: unless-stopped

networks:
  demo-network:
    driver: bridge

volumes:
  postgres_data:
  chroma_data:
