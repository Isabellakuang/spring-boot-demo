package com.scb.ragdemo.model.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;

/**
 * Document Chunk Entity
 * Stores text chunks split from documents for vector search and semantic retrieval
 */
@Entity
@Table(name = "document_chunks", indexes = {
    @Index(name = "idx_document_id", columnList = "document_id"),
    @Index(name = "idx_content_tsv", columnList = "content_tsv")
})
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class DocumentChunk {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Associated document ID
     */
    @Column(name = "document_id", nullable = false)
    private Long documentId;

    /**
     * Chunk index (position in the original document)
     */
    @Column(name = "chunk_index", nullable = false)
    private Integer chunkIndex;

    /**
     * Chunk content
     */
    @Column(nullable = false, columnDefinition = "TEXT")
    private String content;

    /**
     * Full-text search vector (PostgreSQL tsvector type)
     * Used for keyword-based full-text search
     * This field is automatically generated by database trigger, so it's not insertable/updatable from JPA
     */
    @Column(name = "content_tsv", columnDefinition = "tsvector", insertable = false, updatable = false)
    private String contentTsv;

    /**
     * Creation timestamp
     */
    @CreationTimestamp
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    /**
     * Associated document entity (lazy loading to avoid performance issues)
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "document_id", insertable = false, updatable = false)
    private Document document;
}
